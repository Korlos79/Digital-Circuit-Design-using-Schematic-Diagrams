// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2023 19:30:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FIFO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FIFO_vlg_sample_tst(
	CLK,
	E,
	Input,
	Read/Write,
	Reset,
	sampler_tx
);
input  CLK;
input  E;
input [7:0] Input;
input  Read/Write;
input  Reset;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or E or Input or Read/Write or Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FIFO_vlg_check_tst (
	Address,
	Back,
	Empty,
	Front,
	Full,
	Output,
	sampler_rx
);
input [4:0] Address;
input [4:0] Back;
input  Empty;
input [4:0] Front;
input  Full;
input [7:0] Output;
input sampler_rx;

reg [4:0] Address_expected;
reg [4:0] Back_expected;
reg  Empty_expected;
reg [4:0] Front_expected;
reg  Full_expected;
reg [7:0] Output_expected;

reg [4:0] Address_prev;
reg [4:0] Back_prev;
reg  Empty_prev;
reg [4:0] Front_prev;
reg  Full_prev;
reg [7:0] Output_prev;

reg [4:0] Address_expected_prev;
reg [4:0] Back_expected_prev;
reg  Empty_expected_prev;
reg [4:0] Front_expected_prev;
reg  Full_expected_prev;
reg [7:0] Output_expected_prev;

reg [4:0] last_Address_exp;
reg [4:0] last_Back_exp;
reg  last_Empty_exp;
reg [4:0] last_Front_exp;
reg  last_Full_exp;
reg [7:0] last_Output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Address_prev = Address;
	Back_prev = Back;
	Empty_prev = Empty;
	Front_prev = Front;
	Full_prev = Full;
	Output_prev = Output;
end

// update expected /o prevs

always @(trigger)
begin
	Address_expected_prev = Address_expected;
	Back_expected_prev = Back_expected;
	Empty_expected_prev = Empty_expected;
	Front_expected_prev = Front_expected;
	Full_expected_prev = Full_expected;
	Output_expected_prev = Output_expected;
end



// expected Empty
initial
begin
	Empty_expected = 1'bX;
end 

// expected Full
initial
begin
	Full_expected = 1'bX;
end 
// expected Front[ 4 ]
initial
begin
	Front_expected[4] = 1'bX;
end 
// expected Front[ 3 ]
initial
begin
	Front_expected[3] = 1'bX;
end 
// expected Front[ 2 ]
initial
begin
	Front_expected[2] = 1'bX;
end 
// expected Front[ 1 ]
initial
begin
	Front_expected[1] = 1'bX;
end 
// expected Front[ 0 ]
initial
begin
	Front_expected[0] = 1'bX;
end 
// expected Back[ 4 ]
initial
begin
	Back_expected[4] = 1'bX;
end 
// expected Back[ 3 ]
initial
begin
	Back_expected[3] = 1'bX;
end 
// expected Back[ 2 ]
initial
begin
	Back_expected[2] = 1'bX;
end 
// expected Back[ 1 ]
initial
begin
	Back_expected[1] = 1'bX;
end 
// expected Back[ 0 ]
initial
begin
	Back_expected[0] = 1'bX;
end 
// expected Address[ 4 ]
initial
begin
	Address_expected[4] = 1'bX;
end 
// expected Address[ 3 ]
initial
begin
	Address_expected[3] = 1'bX;
end 
// expected Address[ 2 ]
initial
begin
	Address_expected[2] = 1'bX;
end 
// expected Address[ 1 ]
initial
begin
	Address_expected[1] = 1'bX;
end 
// expected Address[ 0 ]
initial
begin
	Address_expected[0] = 1'bX;
end 
// expected \Output [ 7 ]
initial
begin
	Output_expected[7] = 1'bX;
end 
// expected \Output [ 6 ]
initial
begin
	Output_expected[6] = 1'bX;
end 
// expected \Output [ 5 ]
initial
begin
	Output_expected[5] = 1'bX;
end 
// expected \Output [ 4 ]
initial
begin
	Output_expected[4] = 1'bX;
end 
// expected \Output [ 3 ]
initial
begin
	Output_expected[3] = 1'bX;
end 
// expected \Output [ 2 ]
initial
begin
	Output_expected[2] = 1'bX;
end 
// expected \Output [ 1 ]
initial
begin
	Output_expected[1] = 1'bX;
end 
// expected \Output [ 0 ]
initial
begin
	Output_expected[0] = 1'bX;
end 
// generate trigger
always @(Address_expected or Address or Back_expected or Back or Empty_expected or Empty or Front_expected or Front or Full_expected or Full or Output_expected or Output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Address = %b | expected Back = %b | expected Empty = %b | expected Front = %b | expected Full = %b | expected Output = %b | ",Address_expected_prev,Back_expected_prev,Empty_expected_prev,Front_expected_prev,Full_expected_prev,Output_expected_prev);
	$display("| real Address = %b | real Back = %b | real Empty = %b | real Front = %b | real Full = %b | real Output = %b | ",Address_prev,Back_prev,Empty_prev,Front_prev,Full_prev,Output_prev);
`endif
	if (
		( Address_expected_prev[0] !== 1'bx ) && ( Address_prev[0] !== Address_expected_prev[0] )
		&& ((Address_expected_prev[0] !== last_Address_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[0] = Address_expected_prev[0];
	end
	if (
		( Address_expected_prev[1] !== 1'bx ) && ( Address_prev[1] !== Address_expected_prev[1] )
		&& ((Address_expected_prev[1] !== last_Address_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[1] = Address_expected_prev[1];
	end
	if (
		( Address_expected_prev[2] !== 1'bx ) && ( Address_prev[2] !== Address_expected_prev[2] )
		&& ((Address_expected_prev[2] !== last_Address_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[2] = Address_expected_prev[2];
	end
	if (
		( Address_expected_prev[3] !== 1'bx ) && ( Address_prev[3] !== Address_expected_prev[3] )
		&& ((Address_expected_prev[3] !== last_Address_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[3] = Address_expected_prev[3];
	end
	if (
		( Address_expected_prev[4] !== 1'bx ) && ( Address_prev[4] !== Address_expected_prev[4] )
		&& ((Address_expected_prev[4] !== last_Address_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Address_expected_prev);
		$display ("     Real value = %b", Address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Address_exp[4] = Address_expected_prev[4];
	end
	if (
		( Back_expected_prev[0] !== 1'bx ) && ( Back_prev[0] !== Back_expected_prev[0] )
		&& ((Back_expected_prev[0] !== last_Back_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Back[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Back_expected_prev);
		$display ("     Real value = %b", Back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Back_exp[0] = Back_expected_prev[0];
	end
	if (
		( Back_expected_prev[1] !== 1'bx ) && ( Back_prev[1] !== Back_expected_prev[1] )
		&& ((Back_expected_prev[1] !== last_Back_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Back[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Back_expected_prev);
		$display ("     Real value = %b", Back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Back_exp[1] = Back_expected_prev[1];
	end
	if (
		( Back_expected_prev[2] !== 1'bx ) && ( Back_prev[2] !== Back_expected_prev[2] )
		&& ((Back_expected_prev[2] !== last_Back_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Back[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Back_expected_prev);
		$display ("     Real value = %b", Back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Back_exp[2] = Back_expected_prev[2];
	end
	if (
		( Back_expected_prev[3] !== 1'bx ) && ( Back_prev[3] !== Back_expected_prev[3] )
		&& ((Back_expected_prev[3] !== last_Back_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Back[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Back_expected_prev);
		$display ("     Real value = %b", Back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Back_exp[3] = Back_expected_prev[3];
	end
	if (
		( Back_expected_prev[4] !== 1'bx ) && ( Back_prev[4] !== Back_expected_prev[4] )
		&& ((Back_expected_prev[4] !== last_Back_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Back[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Back_expected_prev);
		$display ("     Real value = %b", Back_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Back_exp[4] = Back_expected_prev[4];
	end
	if (
		( Empty_expected_prev !== 1'bx ) && ( Empty_prev !== Empty_expected_prev )
		&& ((Empty_expected_prev !== last_Empty_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Empty_expected_prev);
		$display ("     Real value = %b", Empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Empty_exp = Empty_expected_prev;
	end
	if (
		( Front_expected_prev[0] !== 1'bx ) && ( Front_prev[0] !== Front_expected_prev[0] )
		&& ((Front_expected_prev[0] !== last_Front_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Front[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Front_expected_prev);
		$display ("     Real value = %b", Front_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Front_exp[0] = Front_expected_prev[0];
	end
	if (
		( Front_expected_prev[1] !== 1'bx ) && ( Front_prev[1] !== Front_expected_prev[1] )
		&& ((Front_expected_prev[1] !== last_Front_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Front[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Front_expected_prev);
		$display ("     Real value = %b", Front_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Front_exp[1] = Front_expected_prev[1];
	end
	if (
		( Front_expected_prev[2] !== 1'bx ) && ( Front_prev[2] !== Front_expected_prev[2] )
		&& ((Front_expected_prev[2] !== last_Front_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Front[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Front_expected_prev);
		$display ("     Real value = %b", Front_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Front_exp[2] = Front_expected_prev[2];
	end
	if (
		( Front_expected_prev[3] !== 1'bx ) && ( Front_prev[3] !== Front_expected_prev[3] )
		&& ((Front_expected_prev[3] !== last_Front_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Front[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Front_expected_prev);
		$display ("     Real value = %b", Front_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Front_exp[3] = Front_expected_prev[3];
	end
	if (
		( Front_expected_prev[4] !== 1'bx ) && ( Front_prev[4] !== Front_expected_prev[4] )
		&& ((Front_expected_prev[4] !== last_Front_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Front[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Front_expected_prev);
		$display ("     Real value = %b", Front_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Front_exp[4] = Front_expected_prev[4];
	end
	if (
		( Full_expected_prev !== 1'bx ) && ( Full_prev !== Full_expected_prev )
		&& ((Full_expected_prev !== last_Full_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Full_expected_prev);
		$display ("     Real value = %b", Full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Full_exp = Full_expected_prev;
	end
	if (
		( Output_expected_prev[0] !== 1'bx ) && ( Output_prev[0] !== Output_expected_prev[0] )
		&& ((Output_expected_prev[0] !== last_Output_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Output_exp[0] = Output_expected_prev[0];
	end
	if (
		( Output_expected_prev[1] !== 1'bx ) && ( Output_prev[1] !== Output_expected_prev[1] )
		&& ((Output_expected_prev[1] !== last_Output_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Output_exp[1] = Output_expected_prev[1];
	end
	if (
		( Output_expected_prev[2] !== 1'bx ) && ( Output_prev[2] !== Output_expected_prev[2] )
		&& ((Output_expected_prev[2] !== last_Output_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Output_exp[2] = Output_expected_prev[2];
	end
	if (
		( Output_expected_prev[3] !== 1'bx ) && ( Output_prev[3] !== Output_expected_prev[3] )
		&& ((Output_expected_prev[3] !== last_Output_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Output_exp[3] = Output_expected_prev[3];
	end
	if (
		( Output_expected_prev[4] !== 1'bx ) && ( Output_prev[4] !== Output_expected_prev[4] )
		&& ((Output_expected_prev[4] !== last_Output_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Output_exp[4] = Output_expected_prev[4];
	end
	if (
		( Output_expected_prev[5] !== 1'bx ) && ( Output_prev[5] !== Output_expected_prev[5] )
		&& ((Output_expected_prev[5] !== last_Output_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Output_exp[5] = Output_expected_prev[5];
	end
	if (
		( Output_expected_prev[6] !== 1'bx ) && ( Output_prev[6] !== Output_expected_prev[6] )
		&& ((Output_expected_prev[6] !== last_Output_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Output_exp[6] = Output_expected_prev[6];
	end
	if (
		( Output_expected_prev[7] !== 1'bx ) && ( Output_prev[7] !== Output_expected_prev[7] )
		&& ((Output_expected_prev[7] !== last_Output_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Output_exp[7] = Output_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module FIFO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg E;
reg [7:0] Input;
reg Read/Write;
reg Reset;
// wires                                               
wire [4:0] Address;
wire [4:0] Back;
wire Empty;
wire [4:0] Front;
wire Full;
wire [7:0] Output;

wire sampler;                             

// assign statements (if any)                          
FIFO i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.Back(Back),
	.CLK(CLK),
	.E(E),
	.Empty(Empty),
	.Front(Front),
	.Full(Full),
	.\Input (Input),
	.\Output (Output),
	.\Read/Write (Read/Write),
	.Reset(Reset)
);

// CLK
initial
begin
	CLK = 1'b1;
	# 10000;
	repeat(49)
	begin
		CLK = 1'b0;
		CLK = #10000 1'b1;
		# 10000;
	end
	CLK = 1'b0;
end 

// E
initial
begin
	E = 1'b1;
end 

// Read/Write
initial
begin
	Read/Write = 1'b1;
	Read/Write = #660000 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #780000 1'b1;
	Reset = #20000 1'b0;
end 
// \Input [ 7 ]
initial
begin
	Input[7] = 1'b0;
	Input[7] = #560000 1'b1;
end 
// \Input [ 6 ]
initial
begin
	Input[6] = 1'b0;
	Input[6] = #240000 1'b1;
	Input[6] = #320000 1'b0;
	Input[6] = #320000 1'b1;
end 
// \Input [ 5 ]
initial
begin
	Input[5] = 1'b0;
	# 80000;
	repeat(2)
	begin
		Input[5] = 1'b1;
		Input[5] = #160000 1'b0;
		# 160000;
	end
	Input[5] = 1'b1;
	Input[5] = #160000 1'b0;
end 
// \Input [ 4 ]
initial
begin
	repeat(6)
	begin
		Input[4] = 1'b1;
		Input[4] = #80000 1'b0;
		# 80000;
	end
	Input[4] = 1'b1;
end 
// \Input [ 3 ]
initial
begin
	repeat(12)
	begin
		Input[3] = 1'b0;
		Input[3] = #40000 1'b1;
		# 40000;
	end
	Input[3] = 1'b0;
end 
// \Input [ 2 ]
always
begin
	Input[2] = 1'b0;
	Input[2] = #20000 1'b1;
	#20000;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b0;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b0;
end 

FIFO_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.E(E),
	.Input(Input),
	.Read/Write(Read/Write),
	.Reset(Reset),
	.sampler_tx(sampler)
);

FIFO_vlg_check_tst tb_out(
	.Address(Address),
	.Back(Back),
	.Empty(Empty),
	.Front(Front),
	.Full(Full),
	.Output(Output),
	.sampler_rx(sampler)
);
endmodule

